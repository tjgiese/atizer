#!/usr/bin/env python

import os,sys,stat
from atizer.utilities import *

if len(sys.argv) < 2 or len(sys.argv) > 2:
    raise Exception("""

Usage: autotool-init-library name
where "name" is the name of the library you are creating
""")

name = sys.argv[1]

contents = """#!/usr/bin/env python
from atizer import *
from atizer.dbase import *

class %s(autolib):
    def __init__( self, srcdir=None ):
        super( %s, self ).__init__( "%s", srcdir )

        self.copyright_holder = "%s"
        self.license = licenses.MIT

        ## @brief List of autolib objects representing library dependencies
        self.libs = []

        ## @brief List of filenames to be distributed, but not installed
        self.dist_noinst_SCRIPTS = []
        self.EXTRA_DIST = []

        ## @brief If True, then compile the target without installing it
        #         (default False)
        self.noinst = False

        ## @brief If True, then install the library within the build tree
        #         (default False)
        self.install_here = False

        ## @brief If True, then link the library in a manner suitable
        #         for importing it into a python script
        #         (default False)
        self.python_module = False

        ## @brief If True, "make doxygen-doc" create documentation html
        self.doxygen = False

        # self.enable_openmp()
        # self.enable_mpi()

    def ac_subst_var_serial(self,fh):
        m4_generic_cxx_serial_conftest(
            self,fh,
            "%s.hpp",
            \"""#include <%s/%s.hpp>\""",
            \"""%s();\""")

    # def ac_subst_var_openmp(self,fh):
    #     m4_generic_cxx_openmp_conftest(
    #         self,fh,
    #         "%s.hpp",
    #         \"""#include <%s/%s.hpp>\""",
    #         \"""%s();\""")

    # def ac_subst_var_mpi(self,fh):
    #     m4_generic_cxx_mpi_conftest(
    #         self,fh,
    #         "%s.hpp",
    #         \"""#include <%s/%s.hpp>\""",
    #         \"""%s();\""")

package = autopackage(
    "%s",
    targets=[ %s( here() ) ],
    subdirs=[],
    version="0.1",
    apiversion="0:0:0")

if __name__ == "__main__":
    package.configure()
"""% tuple( [name]*3 + [get_user_fullname()] + [name]*14 )

if os.path.exists("__init__.py"):
    print(contents)
else:
    fh = open("__init__.py","w")
    fh.write(contents)
    fh.close()
    st = os.stat('__init__.py')
    os.chmod('__init__.py', st.st_mode | stat.S_IEXEC)
