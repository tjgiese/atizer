#!/usr/bin/env python

import os,sys,stat


if len(sys.argv) > 2:
    raise Exception("""

Usage: autotool-init-program name
where "name" is the name of the library you are creating
""")
name = os.path.basename(os.path.normpath(os.getcwd()))
if len(sys.argv) == 2:
    name = sys.argv[1]

contents = """#!/usr/bin/env python
from atizer import *
from atizer.dbase import *
import re

excl = [ r".pyc$", ".o$", r"~$", r"^#" ]

def is_not_garbage(f):
    ok = True
    for x in excl:
        m = re.search(x,f)
        if m is not None:
            ok = False
            break
    return ok

class %s(autoprog):
    def __init__( self, srcdir=None ):
        super( %s, self ).__init__( "%s", srcdir )
        init = self.directory + "/__init__.py"
        for filename in recursive_find("*",self.directory):
            if filename != init and is_not_garbage(filename):
                self.EXTRA_DIST.append(filename)

package = autopackage(
    "%s",
    targets=[ %s( here() ) ],
    subdirs=[],
    version="0.1",
    apiversion="0:0:0")

if __name__ == "__main__":
    package.configure()
"""% tuple( [name]*5 )

if os.path.exists("__init__.py"):
    print(contents)
else:
    fh = open("__init__.py","w")
    fh.write(contents)
    fh.close()
    st = os.stat('__init__.py')
    os.chmod('__init__.py', st.st_mode | stat.S_IEXEC)
